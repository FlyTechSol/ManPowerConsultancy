// <auto-generated />
using System;
using MC.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MC.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20250826112027_init0")]
    partial class init0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MC.Domain.Entity.Common.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eae9d433-cbfb-40fe-960a-cde265b2faea"),
                            Body = "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Welcome to the Organization</title>\r\n    <style>\r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            color: #333;\r\n            background-color: #f9f9f9;\r\n            padding: 20px;\r\n        }\r\n        .container {\r\n            background-color: #ffffff;\r\n            padding: 30px;\r\n            border-radius: 8px;\r\n            box-shadow: 0px 0px 10px #ccc;\r\n        }\r\n        .footer {\r\n            margin-top: 30px;\r\n            font-size: 12px;\r\n            color: #888;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <h2>Hello {UserName},</h2>\r\n\r\n        <p>Welcome aboard! We are thrilled to have you join our team.</p>\r\n\r\n        <p>Your registration has been successfully completed, and we are excited about the contributions you’ll bring to the organization.</p>\r\n\r\n        <p><strong>Your official joining date is:</strong> {DateOfJoining}</p>\r\n\r\n        <p>If you have any questions before your start date, feel free to reach out to your hiring manager or HR representative.</p>\r\n\r\n        <p>We look forward to working with you and seeing you thrive in your new role!</p>\r\n		\r\n		<p>No action required from your end, will notify once your profile is approved </p>\r\n		\r\n        <p>Warm regards,</p>\r\n        <p><strong>HR Team</strong><br/>SBS Enterprises</p>\r\n\r\n        <div class=\"footer\">\r\n            This is an automated email. Please do not reply to this message.\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Subject = "Welcome to the Organization, {UserName}!",
                            TemplateName = "StaffCreated"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("13ba1d43-1f90-466b-8b67-6aeb5e32581f"),
                            DisplayOrder = 1,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = new Guid("94231286-f784-4141-9087-08050f9c0acf"),
                            DisplayOrder = 2,
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = new Guid("2c157266-193a-4f44-8512-950b1d025408"),
                            DisplayOrder = 3,
                            Name = "SiteIncharge",
                            NormalizedName = "SITEINCHARGE"
                        },
                        new
                        {
                            Id = new Guid("2d149421-8f16-4a0a-869e-ea05653c89f3"),
                            DisplayOrder = 3,
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = new Guid("5e7d2008-e189-48ac-b7b2-b7291c697715"),
                            DisplayOrder = 4,
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = new Guid("2cdf7283-eaf0-4f5a-b44a-4def5ed91da8"),
                            DisplayOrder = 5,
                            Name = "GeneralManager",
                            NormalizedName = "GENERALMANAGER"
                        },
                        new
                        {
                            Id = new Guid("ba2e09d3-8a52-48a5-a4a9-178e53d60fde"),
                            DisplayOrder = 6,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "905afbf7-cb82-4046-aab6-2e634a9fc0cc",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIZEnobWLWVm+KqYua3eConzPpMHEraORI5xGWGyIXsrYHZGO8Z/Fgvj2Frc+Wex8A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = new Guid("9e224968-33e4-4652-b7b7-8574d048cdb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "A494A604-0DEA-42B2-B262-BDEAFC80F7E1",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOq0WMnbfCDHwU/jNJl2v/3I4IpjEpTT39fO3H64akUI1TXP1XuJfNm6+l9OGk0mjQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user@localhost.com"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f94266b-59c9-4414-ad04-dba60100f74e"),
                            Code = "Adapter",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Adapter"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000001"),
                            Code = "All In One Desktop",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "All In One Desktop"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000002"),
                            Code = "Bluetooth Wireless Mouse",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 3,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Bluetooth Wireless Mouse"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000003"),
                            Code = "Combo Keyboard Mouse",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 4,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Combo Keyboard Mouse"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000004"),
                            Code = "Desktop",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 5,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000005"),
                            Code = "External Hard Disk",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 6,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "External Hard Disk"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000006"),
                            Code = "Hard Disk",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 7,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Hard Disk"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000007"),
                            Code = "Keyboard",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 8,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000008"),
                            Code = "Keys",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 9,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Keys"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000009"),
                            Code = "Laptop",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 10,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00000a"),
                            Code = "Laptop Bag",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 11,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Laptop Bag"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00000b"),
                            Code = "Legal Documents",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 12,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Legal Documents"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00000c"),
                            Code = "Mobile",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 13,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00000d"),
                            Code = "Monitor",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 14,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Monitor"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00000e"),
                            Code = "Mouse",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 15,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00000f"),
                            Code = "Mouse Paid",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 16,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Mouse Paid"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000010"),
                            Code = "Pen Drive",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 17,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Pen Drive"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000011"),
                            Code = "Petro Card",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 18,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Petro Card"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000012"),
                            Code = "Portable Wi Fi",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 19,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Portable Wi Fi"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000013"),
                            Code = "Projector",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 20,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Projector"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000014"),
                            Code = "Rack",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 21,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Rack"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000015"),
                            Code = "Registers",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 22,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Registers"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000016"),
                            Code = "Samsung Tab (T295)",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 23,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Samsung Tab (T295)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000017"),
                            Code = "Apple Tab",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 24,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Apple Tab"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000018"),
                            Code = "Sim Card",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 25,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Sim Card"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000019"),
                            Code = "Sound Speaker",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 26,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Sound Speaker"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00001a"),
                            Code = "Stationary",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 27,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Stationary"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00001b"),
                            Code = "Type-C To Lan Adapter",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 28,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Type-C To Lan Adapter"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00001c"),
                            Code = "Type-C USB Hub",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 29,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Type-C USB Hub"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00001d"),
                            Code = "UPS",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 30,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "UPS"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00001e"),
                            Code = "USB To Lan Connector",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 31,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "USB To Lan Connector"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef00001f"),
                            Code = "USB Wifi",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 32,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "USB Wifi"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000020"),
                            Code = "Vehicle",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 33,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Vehicle"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000021"),
                            Code = "Web-Cam",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 34,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Web-Cam"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000022"),
                            Code = "Wifi Router",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 35,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Wifi Router"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4711-8899-abcdef000023"),
                            Code = "Wireless Mouse",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 36,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Wireless Mouse"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.CasteCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CasteCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88deaa1c-c775-4f23-a5bc-99d2ded0a482"),
                            Code = "Gen",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("001a635e-d1ab-41c4-84aa-50c8b2ab5b69"),
                            Code = "SC",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Scheduled Caste"
                        },
                        new
                        {
                            Id = new Guid("f513d877-2d3d-4499-96ef-45e4b21cb6f1"),
                            Code = "ST",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 3,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Scheduled Tribe"
                        },
                        new
                        {
                            Id = new Guid("c41dde3e-d44b-44e0-856c-7b5cb1bf2fc3"),
                            Code = "OBC",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 4,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Other Backward Classes"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DialCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7252f718-78be-4423-8e11-eab6700490ce"),
                            Code = "IN",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DialCode = "+91",
                            DisplayOrder = 1,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "India"
                        },
                        new
                        {
                            Id = new Guid("ea5e777c-6290-4232-b97f-09ac7902b6ce"),
                            Code = "NP",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DialCode = "+977",
                            DisplayOrder = 2,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Nepal"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsAddressProof")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAgeProof")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIdentityProof")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsQualificationProof")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce952ec2-d4c4-4bf6-b0de-ea441dac9206"),
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Issued by Govt. Of India",
                            DocumentName = "Aadhaar",
                            IsAddressProof = true,
                            IsAgeProof = false,
                            IsDeleted = false,
                            IsIdentityProof = true,
                            IsQualificationProof = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            Id = new Guid("6fb4a203-871a-49b6-9b8e-ddcd73b6f98a"),
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Issued by Govt. Of India",
                            DocumentName = "Driving License",
                            IsAddressProof = true,
                            IsAgeProof = true,
                            IsDeleted = false,
                            IsIdentityProof = true,
                            IsQualificationProof = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            Id = new Guid("103b1e73-c652-458e-ad5f-9ea868d7e3e9"),
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "High School Certificat/Marksheet",
                            DocumentName = "High School Certificat/Marksheet",
                            IsAddressProof = false,
                            IsAgeProof = true,
                            IsDeleted = false,
                            IsIdentityProof = false,
                            IsQualificationProof = true,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36347864-631a-4f09-a62e-f090a3a5cc5b"),
                            Code = "M",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("d98d9544-7ae7-43de-ab11-3dc7a46b4a0e"),
                            Code = "F",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.HighestEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("HighestEducations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0724662-f36f-4be6-9fc1-0122ae89b634"),
                            Code = "BM",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Below Matric"
                        },
                        new
                        {
                            Id = new Guid("5606ce88-efbf-4406-8cfd-ee2aab75a76d"),
                            Code = "M",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Matric"
                        },
                        new
                        {
                            Id = new Guid("a6aa659e-23d5-4a4f-9030-4ff36a3a8d05"),
                            Code = "AM",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 3,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Above Matric"
                        },
                        new
                        {
                            Id = new Guid("912cf56b-e42e-4297-86a8-8b7c6c1fdd6a"),
                            Code = "UG",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 4,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Under Graduate"
                        },
                        new
                        {
                            Id = new Guid("5e039e37-dc5f-48cc-8dca-17a82174d779"),
                            Code = "G",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 5,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Graduate"
                        },
                        new
                        {
                            Id = new Guid("1fd20a85-e0ae-4efd-91a8-e097c043e30d"),
                            Code = "PG",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 6,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Post Graduate"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.RecruitmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("RecruitmentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("568ab9c5-a0d3-441d-80e8-5a5651798324"),
                            Code = "WI",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Walk -in"
                        },
                        new
                        {
                            Id = new Guid("57b75925-449a-407e-8cc3-ebff71ea3496"),
                            Code = "R",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Referral"
                        },
                        new
                        {
                            Id = new Guid("105b314f-db6d-420f-b54e-1bb827e7754a"),
                            Code = "RD",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 3,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Recruitment Drive"
                        },
                        new
                        {
                            Id = new Guid("7f9a2901-e56c-4395-950d-a8a103f07de5"),
                            Code = "O",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 4,
                            IsDeleted = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Religion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsFemale")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMale")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad77f3f7-cf8a-4f72-a38d-f9aaade1d79f"),
                            Code = "Mr",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            IsDeleted = false,
                            IsFemale = false,
                            IsMale = true,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Mr"
                        },
                        new
                        {
                            Id = new Guid("e38e5fb5-5339-46b9-b108-df23f286a5f4"),
                            Code = "Mrs",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            IsDeleted = false,
                            IsFemale = true,
                            IsMale = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Mrs"
                        },
                        new
                        {
                            Id = new Guid("38a86421-edb4-4226-8e95-423f65785280"),
                            Code = "Miss",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 3,
                            IsDeleted = false,
                            IsFemale = true,
                            IsMale = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Miss"
                        },
                        new
                        {
                            Id = new Guid("93ee9668-462f-437e-bf20-84bef4c38428"),
                            Code = "Ms",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 4,
                            IsDeleted = false,
                            IsFemale = true,
                            IsMale = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Ms"
                        },
                        new
                        {
                            Id = new Guid("2673ea56-221c-433e-9a54-a2740615f9ab"),
                            Code = "Dr",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 5,
                            IsDeleted = false,
                            IsFemale = true,
                            IsMale = false,
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            Name = "Dr"
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.ZipCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("MC.Domain.Entity.Menu.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsParent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MenuDisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NavigationURL")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MC.Domain.Entity.Menu.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MenuItemDisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("MenuId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("C_AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("C_AddressLine2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("C_City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("C_Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("C_District")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("C_PinCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("C_State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPermanentAddressSame")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("P_AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("P_AddressLine2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("P_City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("P_Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("P_District")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("P_PinCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("P_State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId", "IsActive")
                        .HasDatabaseName("IX_Addresses_UserProfileId_IsActive");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPassbookAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PassbookUrl")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.BodyMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ChestCm")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EyeColour")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("HairColour")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<double?>("HeightCm")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<double?>("ShoulderCm")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.Property<double?>("WeightKg")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("BodyMeasurements");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LandlineNumber1")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LandlineNumber2")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OfficialEmail")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("OfficialMobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("PersonalMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.EmployeeReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmployeeAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EmployeeContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("EmployeeDepartment")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("EmployeeDesignation")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("EmployeeEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeRelationship")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EmployeeReferences");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.ExArmy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BranchOfService")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DischargeCertificateUrl")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EnlistmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Rank")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReasonForDischarge")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ServiceNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TotalService")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ExArmies");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDependent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMinor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPFNominee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsResidingWithEmployee")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("PFPercentage")
                        .HasColumnType("double");

                    b.Property<string>("RelationTo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Famlies");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.GunMan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GunLicenceName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("GunLicenseExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("GunLicenseIssuedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("GunLicenseIssuedDate")
                        .HasColumnType("date");

                    b.Property<string>("GunLicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GunLicenseRemarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Jurisdiction")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LicenceAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MakeOfCompany")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("WeaponNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WeaponType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("GunMen");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsuranceCompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("PolicyEndDate")
                        .HasColumnType("date");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PolicyRemarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("PolicyStartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.InsuranceNominee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NominatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NominatedByCorrespondenceAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("NominatedByDoB")
                        .HasColumnType("date");

                    b.Property<string>("NominatedByFather")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NominatedByPermanentAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NomineeByCorrespondenceAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NomineeByPermanentAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("NomineeDoB")
                        .HasColumnType("date");

                    b.Property<string>("NomineeFather")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomineeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RelationWithNominee")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SoldierNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SoldierRank")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SoldierUnit")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("InsuranceNominees");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.PoliceVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PoliceStationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VerificationRemarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("PoliceVerifications");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.PreviousExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CompanyWorked")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Duration")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LeftDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Place")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReasonForLeft")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PreviousExperiences");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.RegistrationSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LastRegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegistrationSequences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastRegistrationId = 100
                        });
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Resignation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("ResignationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Resignations");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.SecurityDeposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("double");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<double>("NonRefundableAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("double");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("date");

                    b.Property<string>("ReciptNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<double>("RefundableAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("double");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("SecurityDeposits");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TrainingCertificateUrl")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("TrainingEndDate")
                        .HasColumnType("date");

                    b.Property<string>("TrainingInstitute")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrainingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrainingRemarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("TrainingStartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.UserAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AssetValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReturnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasPrecision(9)
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReturnStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserAssets");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.UserGeneralDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CasteCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DifferentlyAbled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("HighestEducationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdentityMarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MotherName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SpouseName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CasteCategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("HighestEducationId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("UserGeneralDetails");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AadhaarNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("AlternatePhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("EsicNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdentityMarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PanNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("RecruitmentTypeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TitleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UanNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("RecruitmentTypeId");

                    b.HasIndex("RegistrationId")
                        .IsUnique();

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed8e68c4-4df4-4989-9155-fed3052d8d25"),
                            AadhaarNumber = "987654321001",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfJoining = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "System",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            MiddleName = "",
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            RegistrationId = 101,
                            TitleId = new Guid("ad77f3f7-cf8a-4f72-a38d-f9aaade1d79f")
                        },
                        new
                        {
                            Id = new Guid("83b6730a-c27c-4898-a7ca-29ad3b59213a"),
                            AadhaarNumber = "987654321002",
                            CreatedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            DateCreated = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfJoining = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "System",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            MiddleName = "",
                            ModifiedByUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            RegistrationId = 102,
                            TitleId = new Guid("ad77f3f7-cf8a-4f72-a38d-f9aaade1d79f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9e224968-33e4-4652-b7b7-8574d048cdb9"),
                            RoleId = new Guid("13ba1d43-1f90-466b-8b67-6aeb5e32581f")
                        },
                        new
                        {
                            UserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            RoleId = new Guid("ba2e09d3-8a52-48a5-a4a9-178e53d60fde")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MC.Domain.Entity.Common.EmailTemplate", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Asset", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Bank", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.CasteCategory", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Country", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Document", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Gender", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.HighestEducation", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.RecruitmentType", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Religion", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.Title", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Master.ZipCode", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Menu.Menu", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MC.Domain.Entity.Menu.MenuItem", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Menu.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Menu");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Address", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("Addresses")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.BankAccount", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.BodyMeasurement", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithOne("BodyMeasurement")
                        .HasForeignKey("MC.Domain.Entity.Registration.BodyMeasurement", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Communication", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithOne("Communication")
                        .HasForeignKey("MC.Domain.Entity.Registration.Communication", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.EmployeeReference", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("EmployeeReferences")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.ExArmy", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("ExArmies")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Family", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("Families")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.GunMan", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("GunMen")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Insurance", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithOne("Insurance")
                        .HasForeignKey("MC.Domain.Entity.Registration.Insurance", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.InsuranceNominee", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("InsuranceNominees")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.PoliceVerification", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithOne("PoliceVerifications")
                        .HasForeignKey("MC.Domain.Entity.Registration.PoliceVerification", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.PreviousExperience", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("PreviousExperiences")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Resignation", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithOne("Resignations")
                        .HasForeignKey("MC.Domain.Entity.Registration.Resignation", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.SecurityDeposit", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithOne("SecurityDeposit")
                        .HasForeignKey("MC.Domain.Entity.Registration.SecurityDeposit", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.Training", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("Trainings")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.UserAsset", b =>
                {
                    b.HasOne("MC.Domain.Entity.Master.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithMany("UserAssets")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.UserGeneralDetail", b =>
                {
                    b.HasOne("MC.Domain.Entity.Master.CasteCategory", "CasteCategory")
                        .WithMany()
                        .HasForeignKey("CasteCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Master.Country", "Nationality")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Master.HighestEducation", "HighestEducation")
                        .WithMany()
                        .HasForeignKey("HighestEducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Master.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Registration.UserProfile", "UserProfile")
                        .WithOne("UserGeneralDetail")
                        .HasForeignKey("MC.Domain.Entity.Registration.UserGeneralDetail", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasteCategory");

                    b.Navigation("CreatedByUser");

                    b.Navigation("HighestEducation");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Nationality");

                    b.Navigation("Religion");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.UserProfile", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Master.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Master.RecruitmentType", "RecruitmentType")
                        .WithMany()
                        .HasForeignKey("RecruitmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Master.Title", "Salutation")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("MC.Domain.Entity.Registration.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Gender");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RecruitmentType");

                    b.Navigation("Salutation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MC.Domain.Entity.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MC.Domain.Entity.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MC.Domain.Entity.Menu.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("MC.Domain.Entity.Registration.UserProfile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankAccounts");

                    b.Navigation("BodyMeasurement");

                    b.Navigation("Communication");

                    b.Navigation("EmployeeReferences");

                    b.Navigation("ExArmies");

                    b.Navigation("Families");

                    b.Navigation("GunMen");

                    b.Navigation("Insurance");

                    b.Navigation("InsuranceNominees");

                    b.Navigation("PoliceVerifications");

                    b.Navigation("PreviousExperiences");

                    b.Navigation("Resignations");

                    b.Navigation("SecurityDeposit");

                    b.Navigation("Trainings");

                    b.Navigation("UserAssets");

                    b.Navigation("UserGeneralDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
